/**
* Course: CMPS 2143 - OOP
* Program 02
* Purpose: Calculate the total of 6 checks
* @author Khethulwazi Kunene
* @version 1.1 01/03/17
* @github repo: https://github.com/khethulwazi
*/

#include <iostream>

using namespace std;

//creates an integer array of size 100
int A[100];

//creates a node with pointer to next
struct Node{
    int x;
    Node *next;
    Node(){
        x = -1;
        next = NULL;
    }
    Node(int n){
        x = n;
        next = NULL;
    }
};

//creates a list object with a head and tail node
class myList{
  private:
    Node *Head;
    Node *Tail;
    int Size;

  public:
    myList(){
        Head = Tail = NULL;
        Size = 0;
    }
    
    /**
    * Adds a new node with a specified value at the end, increments size.
    * @Params: receives an integer value
    * @returns: nothing
    */
    void Push(int val){
        // allocate new memory and init node
        Node *Temp = new Node(val);

        if (!Head && !Tail){
            Head = Tail = Temp;
        }
        else{
            Tail->next = Temp;
            Tail = Temp;
        }
        Size++;
    }

    /**
    * insert an integer into the correct posiotion in the list, increments size.
    * @Params: receives an integer value
    * @returns nothing
    */
    void Insert(int val){
        // allocate new memory and init node
        Node *Temp = new Node(val);

        // figure out where it goes in the list

        Temp->next = Head;
        Head = Temp;
        if (!Tail){
            Tail = Head;
        }
        Size++;
    }

    void PrintTail(){
        cout << Tail->x << endl;
    }

    string Print(){
        Node *Temp = Head;
        string list;

        while (Temp != NULL){
            list += to_string(Temp->x) + "->";
            Temp = Temp->next;
        }

        return list;
    }

    // not implemented 
    int Pop(){
        Size--;
        return 0; //
    }
    
    /**
    * This funtion overloads the + operator so that it works with lists.
    * @Params: constant list Rhs passed by reference
    * @Returns: a modified list using the + operator
    */
    myList operator+(const List &Rhs){
        // Create a new list that will contain both when done
        List NewList;

        // Get a reference to beginning of local list
        Node *Temp = Head;

        // Loop through local list and Push values onto new list
        while (Temp != NULL){
            NewList.Push(Temp->x);
            Temp = Temp->next;
        }

        // Get a reference to head of Rhs
        Temp = Rhs.Head;

        // Same as above, loop and push
        while (Temp != NULL){
            NewList.Push(Temp->x);
            Temp = Temp->next;
        }

        // Return new concatenated version of lists
        return NewList;
    }

    /**
    * Implementation of [] operator. 
    * This function returns an
    * int value as if the list were an array.
    * @Receives: the desired integer index 
    * @Returns: pointer to X
    */
    int operator[](int index){
        Node *Temp = Head;

        if (index >= Size){
            cout << "Index out of bounds, exiting";
            exit(0);
        }
        else{
            for (int i = 0; i < index; i++){
                Temp = Temp->next;
            }
            return Temp->x;
        }
    }

    friend ostream &operator<<(ostream &os, myList L){
        os << L.Print();
        return os;
    }
};

int main(int argc, char **argv){
    myList L1;
    myList L2;

    for (int i = 0; i < 25; i++){
        L1.Push(i);
    }

    for (int i = 50; i < 100; i++){
        L2.Push(i);
    }

    //cout << L1 << endl;
    L1.PrintTail();
    L2.PrintTail();

    List L3 = L1 + L2;
    cout << L3 << endl;

    cout << L3[5] << endl;
    return 0;
}
